((-1, 889304)) <<===>> In problem D why we process the queries backward? [<<<new_com>>>]
((889304, 889308)) <<===>> When you process backwards, the query is equivalent to "color all squares in this row and column which are not yet colored". This way, each square will be colored at most once. So now your answer will be $$$k$$$ raised to some power(which is actually the number of queries where at least one square was colored). [<<<new_com>>>]
((889308, 889314)) <<===>> Got it thanku [<<<new_com>>>]
((889308, 889342)) <<===>> I processed all the queries forwards but ended up getting WA, but I am unable to understand how is there a difference between processing it forwards or backwards? Even if we are doing it forwards then, yes it might be possible that some square is getting colored more than once but in the end I am counting the different number of colors for all the squares so that shouldn't make a difference. [<<<new_com>>>]
((889342, 889528)) <<===>> For each query you want to determine something that happens in the future â€” in the later queries. So to tell something about query $$$i$$$, you have to first process queries $$$i+1$$$..$$$q$$$. That is exactly the same as going backwards over queries: you first determine the status of the query, then add the information about it to some data structure.  [<<<new_com>>>]
((889342, 889598)) <<===>> Failing testcase for your approach: Ticket 587 [<<<new_com>>>]

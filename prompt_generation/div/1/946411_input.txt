<div class="ttypography"><p>&quot;If there is at least one operation left, there are two cases: k=1 and k&gt;=2.If the first case, it is optimal to apply our operation near one of the maximums in the array to maximize min(a_i,a_{i+1})&quot;</p><p>Would it not be more optimal to change a_i &gt; = ans/2 to 1e9? Consider ans = 18, and the following array-</p><p>[0,1,4,5,6,9,10,11,15,17] and nodes [1,2,3,4,5,6,7,8,9,10]</p><p>Let k = 6. The binary search solution would turn this to-</p><p>[1e9, 1e9, 1e9, 1e9, 1e9, 9, 10, 11, 15, 17] and k = 1.</p><p>Now, if we change 15 to 1e9 (as mentioned in the solution), then d(9,10) = 2*9 = 18. But if we change 9 to 1e9, then d(6,8) = 2*10 = 20 &gt; 18?</p></div> <<===>> 
<div class="ttypography"><p>I meant $$$k = 1$$$ and $$$k \ge 2$$$ for the value initially given, not after we apply the operation some number of times.</p></div> <<===>> 
<div class="ttypography"><p>I am not sure I follow, consider-</p><p>arr = [2,3,4,5,11,12], nodes = [1,2,3,4,5,6] and k = 1. </p><p>Let ans = 5. In the binary search, no a_i's would be turned to 1e9 as 5/2 = 2 !&lt; 2. First <strong>if</strong> condition fails as operation wasn't applied. In the second <strong>if</strong> condition, k==1 and max(a_1,..,a_n) = 12 &gt; 5, hence it will return true.</p><p>But, if we change 11 to 1e9, then d(5,6)= 2*min = 2*2 = 4 &lt; 5?</p></div> <<===>> 
<div class="ttypography"><p>The division is not floored, $$$\frac{5}{2} = 2.5$$$, not $$$2$$$.</p></div> <<===>> 
<div class="ttypography"><p>Aha, I think I understand now. Thanks a lot!</p></div> <<===>> 

((-1, 945751)) => <div class="ttypography"><p>You can also solve E using Divide and Conquer DP because of the square cost function</p><p> <submission link> </p></div>
((945751, 946223)) => <div class="ttypography"><p>can you elaborate on the divide and conquer dp? </p></div>
((946223, 946247)) => <div class="ttypography"><p>The objective of the D&amp;C was to calculate the minimum distance after a flight(assuming the flight just landed at some point), so you have a set of distances you got from dijkstra in $$$dp$$$_$$$old$$$, then you calculate post flight distance for $$$i$$$, aka $$$dp$$$_$$$new[i]$$$ as $$$min_j (dp$$$_$$$old[j] + (i-j)^2) $$$</p><p>I divided this up into two parts<br />$$$min_{j&lt;i} (dp$$$_$$$old[j] + (i-j)^2)$$$<br />$$$min_{j&gt;i} (dp$$$_$$$old[j] + (i-j)^2)$$$ </p><p>Both of these are what I solved using D&amp;C DP, followed by more Dijkstra to calculate travel via roads</p></div>
((946247, 946267)) => <div class="ttypography"><p>nice get the divide and conquer now, </p><p>using the optimal to cut up the array was cool wouldn't have thought of that</p></div>
((946247, 946373)) => <div class="ttypography"><p>Can you elaborate how to solve one of those partial minimums? I was able to do that only with some crazy math.</p></div>
((946373, 946378)) => <div class="ttypography"><p>Let $$$opt[i]$$$ be the index $$$j, j&lt;i$$$ which gave the minimum value of $$$dp[j] + (i-j)^2$$$, then Divide and Conquer DP works iff $$$x &lt; y$$$ implies that $$$opt[x] &lt; opt[y]$$$, which you can see is the case here with some light maths. What you do is, if you want to calculate $$$dp[l]$$$ to $$$dp[r]$$$, let $$$mid$$$ be the middle point, you calculate $$$dp[mid]$$$ and $$$opt[mid]$$$ in $$$O(r-l)$$$, and once you calculate $$$opt[mid]$$$, it reduces the range you need to search for the rest of the elements, then you recursively do this calculate $$$dp[mid]$$$ and $$$opt[mid]$$$ for the segments that are left and right of $$$mid$$$. </p><p>This was very brief but you can read more about Divide and Conquer DP <a href="https://cp-algorithms.com/dynamic_programming/divide-and-conquer-dp.html">here</a></p></div>
